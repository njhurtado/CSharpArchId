Model CSharpArchId

This model description is not a real EMF artifact. It was generated by the
org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
code generator can be extended.
This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.

Package cSharpArchId <http://www.example.org/cSharpArchId>

  Class Model
    Attribute name : EString
    Reference archives : Archive<<0..*>>
    Reference compileUnits : CompileUnit<<0..*>>

  Class EnumerationLiteral -> NamedElement

  Class NamedElement -> ASTNode
    Attribute name : EString

  Class Type -> NamedElement

  Class Enumeration -> Type
    Reference enumLiterals : EnumerationLiteral<<0..*>>

  Class ClassDeclaration -> TypeDeclaration
    Reference superClass : TypeAcces<<0..*>>

  Class InterfaceDeclaration -> TypeDeclaration

  Class PrimitiveType -> Type
    Attribute kind : SimpleType

  Class Namespace -> NamedElement
    Reference classes : ClassDeclaration<<1..*>>
    Reference enumerations : Enumeration<<1..*>>
    Reference compileUnits : CompileUnit<<0..*>>

  Class MethodParameter -> NamedElement
    Reference type : Type<<1..1>>

  Class CompileUnit -> NamedElement
    Reference usings : UsingDeclaration<<0..*>>
    Reference elements : NamedElement<<0..*>>
    Attribute originalFilePath : EString
    Reference commentList : Comment<<0..*>>
    Reference typeDeclaration : AbstractTypeDeclaration

  Class ElementRef -> NamedElement

  Class ASTNode
    Reference originalCompilationUnit : CompileUnit

  Class Archive -> NamedElement
    Attribute originalFilePath : EString
    Reference namespaces : Namespace<<0..*>>
    Reference compileUnits : CompileUnit<<0..*>>

  Class UsingDeclaration -> ASTNode

  Class Comment -> ASTNode
    Attribute content : EString

  Class LineComment -> Comment

  Class BlockComment -> Comment

  Class AbstractTypeDeclaration
    Reference commentsBeforeBody : Comment<<0..*>>
    Reference commentsAfterBody : Comment<<0..*>>
    Reference type : Type
    Reference bodyDeclarations : BodyDeclaration<<0..*>>

  Class TypeDeclaration -> AbstractTypeDeclaration

  Class TypeAcces -> Expresion

  Class Expresion -> ASTNode

  Class BodyDeclaration -> NamedElement
    Reference modifier : Modifier

  Class Modifier -> ASTNode
    Attribute visibility : VisibilityKind
    Attribute inheritance : InheritanceKind
    Attribute static : EBoolean
    Reference bodyDeclaration : BodyDeclaration
    Reference annotations : Annotation<<0..*>>

  Class Annotation -> Expresion
    Reference typeacces : TypeAcces<<1..1>>

  Class AbstractMethodDeclaration -> BodyDeclaration
    Reference body : Block
    Reference parameters : SingleVariableDeclaration<<0..*>>
    Reference typeParameters : TypeParameter<<0..*>>
    Reference thrownExceptions : TypeAcces<<0..*>>

  Class Block -> Statement

  Class Statement -> ASTNode

  Class VariableDeclaration -> NamedElement

  Class SingleVariableDeclaration -> VariableDeclaration
    Reference methodDeclaration : AbstractMethodDeclaration

  Class TypeParameter -> Type

  Class MethodDeclaration -> AbstractMethodDeclaration
    Reference returnType : TypeAcces<<0..*>>

  Class ConstructorDeclaration -> AbstractMethodDeclaration

  Class AbstractMethodInvocation -> ASTNode
    Reference typeArguments : TypeAcces<<0..*>>
    Reference arguments : Expresion<<0..*>>

  Class MethodInvocation -> AbstractMethodInvocation
    Reference expression : Expresion<<0..*>>

  Class Assignment -> Expresion

  Class ClassInstanceCreation -> AbstractMethodInvocation
    Reference type : TypeAcces<<1..1>>
    Reference expresion : Expresion

  Class ConstructorInvocation -> AbstractMethodInvocation

  Enum SimpleType
    Literal bool = 0
    Literal byte = 1
    Literal char = 2
    Literal decimal = 3
    Literal double = 4
    Literal float = 5
    Literal int = 6
    Literal long = 7
    Literal sbyte = 8
    Literal short = 9
    Literal uint = 10
    Literal ulong = 11
    Literal ushort = 12
    Literal void = 13
    Literal object = 14
    Literal string = 15

  Enum VisibilityKind
    Literal none = 0
    Literal public = 1
    Literal private = 2
    Literal internal = 3
    Literal protected = 4
    Literal internal_protected = 5
    Literal private_protected = 6

  Enum ModifierKind
    Literal static = 0
    Literal native = 1
    Literal sinchronized = 2
    Literal virtual = 3
    Literal override = 4
    Literal readonly = 5
    Literal const = 6
    Literal new = 7
    Literal none = 8

  Enum InheritanceKind
    Literal none = 0
    Literal abstract = 1
    Literal sealed = 2
